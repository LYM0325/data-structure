
typedef int Elemtype;
typedef struct QNode {
	Elemtype data;
	struct QNode *next;
} QNode,*QueuePtr;
typedef struct {
	QueuePtr front,rear;
} LinkQueue;

void InitQueue(LinkQueue *q)
{
	q->front = q->rear = (QueuePtr)malloc(sizeof(QNode));
	if(!q->front)
	{
		exit(0);
	}
	q->front->next = NULL;
}

void InsertQueue(LinkQueue *q,Elemtype e)
{
	QueuePtr p;
	p = (QueuePtr)malloc(sizeof(QNode));
	if(p == NULL)
	{
		exit(0);
	}
	p->data = e;
	p->next =NULL;
	q->rear->next = p;
	q->rear = p;
}

void DeleteQueue(LinkQueue *q,Elemtype *e)
{
	QueuePtr p;
	if(q->front == q->rear)
	{
		exit(0);
	}
	p = q->front->next;
	*e = p->data;
	q->front->next = p->next;
	if(q->rear == p)
	{
		q->rear = q->front;
	}
	free(p);
	p = NULL;
}

void DestoryQueue(LinkQueue *q)
{
	while(q->front)
	{
		q->rear = q->front->next;
		free(q->front);
		q->front = q->rear;
	}
}

int main() {
	return 0;
}
