#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#define SIZE 20
#define ADDSIZE 10

typedef char ElemType;
typedef struct {
	ElemType *base;
	ElemType *top;
	int stackSize;
} sqStack;

void InitStack(sqStack *s) {
	s->base = (ElemType *)malloc(SIZE*sizeof(ElemType));
	if(!s->base) {
		exit(0);
	}
	s->top = s->base;
	s->stackSize = SIZE;
}

void Push(sqStack *s,ElemType e) {
	if(s->top - s->base >= s->stackSize) {
		s->base = (ElemType *)realloc(s->base,(s->stackSize+ADDSIZE)*sizeof(ElemType));
		if(!s->base) {
			exit(0);
		}
	}
	*(s->top) = e;
	s->top++;

}

void PopStack(sqStack *s,ElemType *e)
{
	if(s->top == s->base)
	{
		return;
	}
	*e = *(--(s->top));
}
int StackLen(sqStack s)
{
	return (s.top - s.base);
}

int main()
{
	ElemType c;
	sqStack s;
	int len,i,sum = 0;
	InitStack(&s);
	printf("请输入二进制数：");
	scanf("%c",&c);
	while(c != '#')
	{
		Push(&s,c);
		scanf("%c",&c);
	}
	getchar();//接受最后一个最后一个字符'\n'
	len = StackLen(s); 
	printf("栈的当前容量:%d\n",len);
	for(i = 0;i<len;i++)
	{
		PopStack(&s,&c);
		sum = sum+(c-48)*pow(2,i);
	}
	printf("转化为十进制后：%d\n",sum);
	return 0;
}
