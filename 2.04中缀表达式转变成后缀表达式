/*
中缀表达式->后缀表达式
从左到右遍历中缀表达式的每个数字和符号，若是数字直接输出
若是符号，则判断其与栈顶符号的优先级，
是右括号或者优先级低于栈顶符号，则栈顶元素依次出栈并输出
直到遇到左括号或者栈空时才将那个符号出栈
*/
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>

#define SIZE 20
#define ADDSIZE 10
#define MAXBUFFER 10

typedef char Elemtype;
typedef struct {
	Elemtype *base;
	Elemtype *top;
	int stackSize;
} sqStack;

void InitStack(sqStack *s) {
	s->base = (Elemtype *)malloc(SIZE*sizeof(Elemtype));
	if(!s->base)
		exit(0);
	s->top = s->base;
	s->stackSize = SIZE;
}
void Push(sqStack *s,Elemtype e) {
	if(s->top - s->base >= s->stackSize) {
		s->base = (Elemtype *)realloc(s->base,(s->stackSize + ADDSIZE)*sizeof(Elemtype));
		if(!s->base)
			exit(0);
		s->top = s->base + s->stackSize;
		s->stackSize = s->stackSize + ADDSIZE;
	}
	*(s->top) = e;
	s->top++;
}
void Pop(sqStack *s,Elemtype *e) {
	if(s->top == s->base) {
		return;
	}
	*e = *--(s->top);
}
int StackLen(sqStack s) {
	return(s.top - s.base);
}
int main() {
	sqStack s;
	char c,e;
	InitStack( &s );
	printf("请输入中缀表达式,输入#表示结束：");
	do {
		scanf("%c",&c);
		while(c>='0'&&c<='9') {
			printf("%c",c);
			scanf("%c",&c);
			if(c<'0' || c>'9') {
				printf(" ");
			}
		}
		if(')' == c) {
			Pop(&s,&e);
			while('(' != e) {
				printf("%c",e);
				Pop(&s,&e);
			}
		} else if('+' == c || '-' == c) {
			if(!StackLen(s)) {
				Push(&s,c);
			} else {
				do {
					Pop(&s,&e);
					if('(' == e) {
						Push(&s,e);
					} else {
						printf("%c",e);
					}
				} while(StackLen(s) && '('!= e);
				Push(&s,c);
			}
		} else if('*' == c|| '/' == c|| '(' == c) {
			Push(&s,c);
		} else if('#' == c) {
			break;
		} else {
			printf("输入有误");
			return -1;
		}
	} while(c != '#');
	return 0;
}
