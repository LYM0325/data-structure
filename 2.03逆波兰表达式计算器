#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>

#define SIZE 20
#define ADDSIZE 10
#define MAXBUFFER 10

typedef double Elemtype;
typedef struct {
	Elemtype *base;
	Elemtype *top;
	int StackSize;
}sqStack;

void InitStack(sqStack *s) {
	s->base = (Elemtype *)malloc(SIZE*sizeof(Elemtype));
	if(!s->base)
		exit(0);
	s->top = s->base;
	s->StackSize = SIZE;
}

void Push(sqStack *s,Elemtype e) {
	if(s->top - s->base >= s->StackSize) {
		s->base = (Elemtype *)realloc(s->base,(s->StackSize + ADDSIZE)*sizeof(Elemtype));
		if(!s->base)
			exit(0);
		s->top = s->base + s->StackSize;
		s->StackSize = s->StackSize + ADDSIZE;
	}
	*(s->top) = e;
	s->top++;
}

void Pop(sqStack *s,Elemtype *e) {
	if(s->top == s->base) {
		return;
	}
	*e = *--(s->top);
}

int StackLen(sqStack s) {
	return (s.top - s.base);
}

int main() {
	sqStack s;
	char c;
	double d,e;
	
	char str[MAXBUFFER];
	int i = 0;
	InitStack(&s);
	printf("请按逆波兰表达式输入待计算数据，数据与运算符之间用空格隔开，并以#作为结束标志：\n");
	scanf("%c",&c);
	while(c != '#') {
		while(isdigit(c) || c=='.') {
			str[i++] = c;
			str[i] = '\0';
			if(i>=10)
			{
				printf("输入的单个数据过大"); 
				return -1;
			}
			scanf("%c",&c);
			if(c == ' ')
			{
				d = atof(str);
				Push(&s,d);
				i = 0;
				break;
			}
		}
		switch(c) {
			case '+':
				Pop(&s,&e);
				Pop(&s,&d);
				Push(&s,d+e);
				break;
			case '-':
				Pop(&s,&e);
				Pop(&s,&d);
				Push(&s,d-e);
				break;
			case '*':
				Pop(&s,&e);
				Pop(&s,&d);
				Push(&s,d*e);
				break;
			case '/':
				Pop(&s,&e);
				Pop(&s,&d);
				if(e != 0) {

					Push(&s,d/e);
				} else {
					printf("除数不能为0");
					return -1;
				}
				break;
		}
		scanf("%c",&c);
	}
	Pop(&s,&d);
printf("最终的计算结果：%f",d);

	return 0;
}
